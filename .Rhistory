state_and_year("Alaska", "2012")
state_and_year <- function(stateName, year) {
year.col <- rlang::sym(paste("binge.both_sexes_", year, sep = ""))
data <- filter(binge_drinking, state == stateName) %>% select(state, location, !!year.col) %>%
arrange(desc(!!year.col))
View(data)
}
state_and_year("Alaska", "2012")
state_and_year <- function(stateName, year) {
year.col <- rlang::sym(paste("binge.both_sexes_", year, sep = ""))
data <- filter(binge_drinking, state == stateName) %>% select(state, location, !!year.col) %>%
arrange(desc(!!year.col))
write.csv(data, file = paste("output/",state,"_",year,"_binge", sep = ""), row.names = FALSE)
}
state_and_year("Alaska", "2012")
state_and_year <- function(stateName, year) {
year.col <- rlang::sym(paste("binge.both_sexes_", year, sep = ""))
data <- filter(binge_drinking, state == stateName) %>% select(state, location, !!year.col) %>%
arrange(desc(!!year.col))
write.csv(data, file = paste("output/", stateName, "_", year, "_binge", sep = ""), row.names = FALSE)
}
state_and_year("Alaska", "2012")
state_and_year <- function(stateName, year) {
year.col <- rlang::sym(paste("binge.both_sexes_", year, sep = ""))
data <- filter(binge_drinking, state == stateName) %>% select(state, location, !!year.col) %>%
arrange(desc(!!year.col))
write.csv(data, file = paste("output/", stateName, "_", year, "_binge", ".csv", sep = ""), row.names = FALSE)
}
state_and_year("Alaska", "2012")
biggest_binge_year <- function(stateName, year) {
paste("In ", stateName, "of year ", year, ", when what was the differences in binge drinking between national drinking for both
sexes?" sep = "")
}
biggest_binge_year <- function(stateName, year) {
paste("In ", stateName, "of year ", year, ", when what was the differences in binge drinking between national drinking for both
sexes?", sep = "")
}
biggest_binge_year("South Dakota", 2003)
state_and_year("Alaska", "2012")
### API Practice ###
## Load the httr and jsonlite libraries for accessing data
install.packages("httr")
install.packages("jsonlite")
library("httr")
library("jsonlite")
# What is the name of the first pokemon?
# What is pikachu's ID number?
# What is the size of the "cheri" berry?
# How many pokemon are in the cave habitat?
response <- GET(https://pokeapi.co/docsv2/)
response <- GET(https://pokeapi.co/docsv2/)
response <- GET("https://pokeapi.co/docsv2/")
### API Practice ###
## Load the httr and jsonlite libraries for accessing data
#install.packages("httr")
#install.packages("jsonlite")
library("httr")
library("jsonlite")
response <- GET("https://pokeapi.co/docsv2/")
# What is the name of the first pokemon?
# What is pikachu's ID number?
# What is the size of the "cheri" berry?
# How many pokemon are in the cave habitat?
# What is the name of the first pokemon?
View(response)
# What is the name of the first pokemon?
print(response)
body <- content(response, "text")
parsed.data <- fromJSON(body)
parsed.data <- fromJSON(body)
parsed.data <- fromJSON(body)
body <- content(response, "text")
parsed.data <- fromJSON(body)
parsed.data <- fromJSON(body)
body
response <- GET("http://pokeapi.co/api/v2/generation/3/")
body <- content(response, "text")
parsed.data <- fromJSON(body)
parsed.data
# What is the name of the first pokemon?
first_pokemon <- parsed.data$name
library("rmarkdown")
librrary("knitr")
library("knitr")
``{r, echo = FALSE, message = TRUE}
```{r, echo = FALSE, message = TRUE}
response <- GET("http://pokeapi.co/api/v2/pokemon/1")
body <- content(response, "text")
parsed.data <- fromJSON(body)
# What is the name of the first pokemon?
first_pokemon <- parsed.data$name
parsed$data
parsed.data
View(parsed.data)
View(parsed.data)
first_id <- parsed.data$id
reponse <- GET("http://pokeapi.co/api/v2/pokemon/25")
body <- content(reponse, "text")
reponse <- GET("http://pokeapi.co/api/v2/pokemon/25")
body <- content(reponse, "text")
response <- GET("http://pokeapi.co/api/v2/pokemon/1")
body <- content(response, "text")
body <- content(response, "text")
reponse <- GET("http://pokeapi.co/api/v2/pokemon/25")
body <- content(reponse, "text")
parsed.data <- fromJSON(body)
pikachu_id <- parsed.data$id
pikachu <- fromJSON(body)
pikachu_id <- pikachu$id
reponse <- GET("http://pokeapi.co/api/v2/item/126/")
body <- content(reponse, "text")
cheri_berry <- fromJSON(body)
cheri_size <- cheri_berry$size
cheri_bery
cheri_berry
reponse <- GET("http://pokeapi.co/api/v2/berry/cheri-berry")
body <- content(reponse, "text")
cheri_berry <- fromJSON(body)
cheri_size <- cheri_berry$size
reponse <- GET("http://pokeapi.co/api/v2/berry/cheri")
body <- content(reponse, "text")
cheri_berry <- fromJSON(body)
cheri_size <- cheri_berry$size
response <- GET("http://pokeapi.co/api/v2/location/cave")
response <- GET("http://pokeapi.co/api/v2/location/cave")
body <- content(reponse, "text")
cave <- fromJSON(body)
### API Practice ###
## Load the httr and jsonlite libraries for accessing data
#install.packages("httr")
#install.packages("jsonlite")
library("httr")
library("jsonlite")
response <- GET("http://pokeapi.co/api/v2/pokemon/1")
body <- content(response, "text")
parsed.data <- fromJSON(body)
# What is the name of the first pokemon?
first_pokemon <- parsed.data$name
# What is pikachu's ID number?
reponse <- GET("http://pokeapi.co/api/v2/pokemon/25")
body <- content(reponse, "text")
pikachu <- fromJSON(body)
pikachu_id <- pikachu$id
# What is the size of the "cheri" berry?
reponse <- GET("http://pokeapi.co/api/v2/berry/cheri")
body <- content(reponse, "text")
cheri_berry <- fromJSON(body)
cheri_size <- cheri_berry$size
# How many pokemon are in the cave habitat?
response <- GET("http://pokeapi.co/api/v2/pokemon-habitat/cave")
body <- content(reponse, "text")
cave <- fromJSON(body)
View(cave)
??length()
?length()
election_all <- readr::read_csv("https://mdkarcher.github.io/StatLabs/election04-16.csv")
DC <- subset(election_all, State == "Washington DC")
election <- subset(election_all, State != "Washington DC")
print(DC)
predict(lin.model, newdata = DC,
interval = "confidence", level = 0.95)
lin.model <- lm(Y2016 ~ Y2012, data=election)
lin.model
predict(lin.model, newdata = DC,
interval = "confidence", level = 0.95)
predict(lin.model, newdata = DC,
interval = "prediction", level = 0.95)
weatherData <- readr::read_csv('https://mdkarcher.github.io/StatLabs/weatherData_lab6.csv')
weatherData
MaxTemp <- weatherData$MaxTemp / 10
Month <- weatherData$Month
par(mfrow = c(1, 3), omi = c(0, 0, .3, 0))
boxplot(MaxTemp, ylab = "Maximum Temperature", main = "Box plot")
hist(MaxTemp, freq = FALSE, col = "steelblue",
xlab = "Maximum Temperature", main = "Histogram")
mtext("Maximum Temperature Distribution", outer = TRUE, side = 3, line = -1)
plot(Month, MaxTemp, col = rgb(0, 0.4, 0, 0.5), pch = 16,
xlab = "Month Number in Year", ylab = "Maximum Temperature", main="Time Trend")
summary(MaxTemp)
t.test(MaxTemp, conf.level = .95)$conf.level
t.test(MaxTemp, conf.level = .95)$conf.int
z.test(MaxTemp, conf.level = .95, sigma.x = sd(MaxTemp))$conf.int
library("BSDA")
z.test(MaxTemp, conf.level = .95, sigma.x = sd(MaxTemp))$conf.int
sd(MaxTemp)
sd(MaxTemp)/sqrt(54)
mean(MaxTemp)
mean(MaxTemp) + sd(MaxTemp)/sqrt(54)
mean(MaxTemp) - sd(MaxTemp)/sqrt(54)
mu.o <- 15
sigma.0 <- sd(MaxTemp)
MaxTemp > 15
count(MaxTemp > 15)
??cout
??count
row(Max Temp > 15)
nrow(Max Temp > 15)
temp.unknown <- sum(MaxTemp > 15)
t.test(MaxTemp, conf.level = .95)
z.test(MaxTemp, conf.level = .95, sigma.x = sd(MaxTemp)
)
z.test(MaxTemp, mu = 54, conf.level = .95, sigma.x = sd(MaxTemp))$conf.int
z.test(MaxTemp, conf.level = .95, sigma.x = sd(MaxTemp))$conf.int
z.test(MaxTemp, conf.level = .95, sigma.x = sd(MaxTemp), alternative = "greater")
z.test(MaxTemp, mu = 54, conf.level = .95, sigma.x = sd(MaxTemp))$conf.int
z.test(MaxTemp, mu = 54, conf.level = .95, sigma.x = sd(MaxTemp))
z.test(MaxTemp, mu = 54, conf.level = .95, sigma.x = sd(MaxTemp), alternative = "greater")
z.test(MaxTemp, mu = 15, conf.level = .95, sigma.x = sd(MaxTemp), alternative = "greater")
t.test(MaxTemp, mu = 15, conf.level = .95, alternative = "greater")
shiny::runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
z.test(MaxTemp, mu = 15, conf.level = .95, sigma.x = sd(MaxTemp), alternative = "greater")
z.test(MaxTemp, mu = 15, conf.level = .95, sigma.x = sd(MaxTemp), alternative = "greater")
z.test(MaxTemp, mu = 15, conf.level = .95, sigma.x = sd(MaxTemp), alternative = "greater")
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
runApp('~/Desktop/INFO_201/PatagoniaWranglers-')
police_data <- read.csv("./data/Seattle_Police_Incident_2014-2017.csv")
setwd()
getwd()
setwd("~/Desktop/INFO_201/PatagoniaWranglers-")
getwd()
police_data <- read.csv("./data/Seattle_Police_Incident_2014-2017.csv")
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
names(police_data)
library(ggplot2)
library(dplyr)
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 0]
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes")
plotted
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
names(police_data)
library(ggplot2)
library(dplyr)
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 0]
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes") + coord_flip()
plotted
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
names(police_data)
library(ggplot2)
library(dplyr)
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 0]
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes") + coord_flip() + scale_x_continuous(expand = waiver())
plotted
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
names(police_data)
library(ggplot2)
library(dplyr)
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 0]
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes") + coord_flip() + scale_x_continuous(limits = NULL)
plotted
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
names(police_data)
library(ggplot2)
library(dplyr)
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 0]
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes") + coord_flip()
plotted
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
names(police_data)
library(ggplot2)
library(dplyr)
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 1000]
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes") + coord_flip()
plotted
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
names(police_data)
library(ggplot2)
library(dplyr)
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 1000]
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes") + scale_x_discrete(breaks = labels, labels = as.character(labels)) + coord_flip()
runApp()
runApp()
runApp()
runApp()
runApp()
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 1000]
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes") + coord_flip()
runApp()
countedCrimes
runApp()
runApp()
dat
runApp()
runApp()
runApp()
runApp()
name(countedCrimes)
View(countedCrimes)
names(countedCrimes)
runApp()
runApp()
runApp()
runApp()
install.packages(DT)
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
install.packages("gridExtra")
runApp()
# Read in data. Uncomment and change it to make it work on your local machine.
# MyData <- read.csv(file="C:/Users/ossi/Final_Project/PatagoniaWranglers-/data/Seattle_Police_Incident_2014-2017.csv.bz2", header=TRUE, sep=",")
# Finds unique values of crimes
uniqueValues <- unique(police_data$Summarized.Offense.Description)
# Creates a dataframe out of these crimes
dat <- data.frame(police_data$Summarized.Offense.Description)
# Counts crimes by their frequency in sightings
countedCrimes <- as.data.frame((table(dat)))
# Filters to most common types of shapes. The larger the number, the less things will show up on graph.
# Will have to make 0 equal to user input. I was thinking something using Numeric output
# https://shiny.rstudio.com/reference/shiny/latest/numericInput.html
# https://shiny.rstudio.com/reference/shiny/latest/updateNumericInput.html
# http://shiny.rstudio.com/gallery/kmeans-example.html
countedCrimes <- countedCrimes[countedCrimes$Freq >= 1000]
grid.table(countedCrimes)
plotted <- qplot(countedCrimes$dat, countedCrimes$Freq, main = "Frequency & Type of Crime", xlab = "Crime Type", ylab = "Amount of Crimes") + coord_flip()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(police_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
region <- url("http://seattlepolice.org/assets/img/precinctmap.png")
region <- source("http://seattlepolice.org/assets/img/precinctmap.png")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(png)
runApp()
runApp()
getwd()
runApp()
??img()
?img()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
